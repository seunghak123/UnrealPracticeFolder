TArray<FUShopData> FUShopData::UserDataReadJsons()
{
    TArray<FUShopData> ShopDataArray;
    // JSON 파일을 읽어들일 문자열 변수
    FString JsonString;
    FString FilePath = TEXT("C:\\Users\\AssortRock\\Desktop\\Json\\Jshop.json");// =FPaths::EngineContentDir()+"Bundle\Json"+ "\JShop.json";  // JSON 파일 경로
    // JSON 파일 읽기
    if (FFileHelper::LoadFileToString(JsonString, *FilePath))
    {
        //LOG(Player, Log, TEXT("%s" ),JsonString);
        LOG(Player, Log, TEXT("Json!!"));
        TSharedPtr<FJsonValue> userJsonValue = TSharedPtr<FJsonValue>();
        TSharedRef<TJsonReader<TCHAR>> JsonReader = TJsonReaderFactory<TCHAR>::Create(JsonString);
        if (FJsonSerializer::Deserialize(JsonReader, userJsonValue))
        {
            LOG(Player, Log, TEXT("Loading!!"));
            TArray<TSharedPtr<FJsonValue>> getJsonArray;
            getJsonArray = userJsonValue->AsArray();
            
            for (const TSharedPtr<FJsonValue>& ArrayItem : getJsonArray)
            {
                TSharedPtr<FJsonObject> JsonObject = ArrayItem->AsObject();
                if (JsonObject.IsValid())
                {
                    FUShopData ShopData ;
                    ShopData.index = JsonObject->GetIntegerField("index");
                    ShopData.shop_id = JsonObject->GetIntegerField("shop_id");
                    ShopData.shop_price = JsonObject->GetIntegerField("shop_price");
                    ShopData.shop_id_string = JsonObject->GetStringField("shop_id_string");
                    ShopDataArray.Add(ShopData);
                }
            }
            
        }
        else
        {
            UE_LOG(LogTemp, Error, TEXT("JSON 파싱 실패"));
        }
    }

    // UShopData 객체 배열 반환
    return ShopDataArray;
}

//언리얼에서 데이터 읽기
메니저쪽에서 DataTable읽어서, 데이터 저장할것(key - value 형식으로)
(key: 클래스)
ADataTableTestGameModeBase::ADataTableTestGameModeBase()
{
    static ConstructorHelpers::FObjectFinder<UDataTable> DataTable(TEXT("/Game/LevelUpTable"));
    if (DataTable.Succeeded())
    {
        LevelUpDataTable = DataTable.Object;
    }
}

void ADataTableTestGameModeBase::BeginPlay()
{
    Super::BeginPlay();

    if (LevelUpDataTable != nullptr)
    {
        for (int32 i = 1; i <= 10; i++)
        {
            FLevelUpTableRow* LevelUpTableRow = LevelUpDataTable->FindRow<FLevelUpTableRow>(FName(*(FString::FormatAsNumber(i))), FString(""));
            UE_LOG(LogTemp, Log, TEXT("Lv.%d :: ExpToNextLevel(%d) TotalExp(%d)"), i, (*LevelUpTableRow).ExpToNextLevel, (*LevelUpTableRow).TotalExp);
        }
    }
}